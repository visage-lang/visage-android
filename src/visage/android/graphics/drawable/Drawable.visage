/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.android.graphics.drawable;

import android.graphics.Rect;
import android.graphics.drawable.Drawable.Callback;

import org.visage.android.AndroidDelegate;

/**
 * @author Alain BÃ©arez <A@cua.li>
 */
public abstract class Drawable extends AndroidDelegate {
    public-read var androidDrawable = bind androidDelegate as android.graphics.drawable.Drawable;

    public var bounds :Rect on replace {
        if (isInitialized(bounds)) updateProperty(function() {
            androidDrawable.setBounds(bounds)
        })
    }
    public var callback :Callback on replace {
        if (isInitialized(callback)) updateProperty(function() {
            androidDrawable.setCallback(callback)
        })
    }
    public var changingConfigurations :Integer on replace {
        if (isInitialized(changingConfigurations)) updateProperty(function() {
            androidDrawable.setChangingConfigurations(changingConfigurations)
        })
    }
    public var dither :Boolean on replace {
        if (isInitialized(dither)) updateProperty(function() {
            androidDrawable.setDither(dither)
        })
    }
    public var filterBitmap :Boolean on replace {
        if (isInitialized(filterBitmap)) updateProperty(function() {
            androidDrawable.setFilterBitmap(filterBitmap)
        })
    }
    public function setVisible(visible :Boolean, restart :Boolean) :Boolean {
        if (null == androidDrawable) {
            false
        } else {
            androidDrawable.setVisible(visible, restart)
        }
    }
}
