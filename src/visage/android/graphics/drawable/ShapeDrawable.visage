/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.android.graphics.drawable;

import android.graphics.ColorFilter;
import android.graphics.Rect;
import android.graphics.drawable.ShapeDrawable.ShaderFactory;
import android.graphics.drawable.shapes.Shape;
import android.graphics.drawable.shapes.RectShape;

/**
 * @author Alain BÃ©arez <A@cua.li>
 */
public class ShapeDrawable extends Drawable {
    override var androidDelegate = android.graphics.drawable.ShapeDrawable{}
    public-read var androidShapeDrawable = bind androidDelegate as android.graphics.drawable.ShapeDrawable;

    public default var shape :Shape = RectShape{} on replace {
        if (isInitialized(bounds)) updateProperty(function() {
            androidShapeDrawable.setShape(shape)
        })
    }
    public var alpha :Integer on replace {
        if (isInitialized(alpha)) updateProperty(function() {
            androidShapeDrawable.setAlpha(alpha)
        })
    }
    public var colorFilter :ColorFilter on replace {
        if (isInitialized(colorFilter)) updateProperty(function() {
            androidShapeDrawable.setColorFilter(colorFilter)
        })
    }
    public var intrinsicHeight :Integer on replace {
        if (isInitialized(intrinsicHeight)) updateProperty(function() {
            androidShapeDrawable.setIntrinsicHeight(intrinsicHeight)
        })
    }
    public var intrinsicWidth :Integer on replace {
        if (isInitialized(intrinsicWidth)) updateProperty(function() {
            androidShapeDrawable.setIntrinsicWidth(intrinsicWidth)
        })
    }
    public var padding :Rect on replace {
        if (isInitialized(padding)) updateProperty(function() {
            androidShapeDrawable.setPadding(padding)
        })
    }
    public var shaderFactory :ShaderFactory on replace {
        if (isInitialized(shaderFactory)) updateProperty(function() {
            androidShapeDrawable.setShaderFactory(shaderFactory)
        })
    }
}
