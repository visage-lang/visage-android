/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.android.graphics.drawable;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Shader.TileMode;
import android.util.DisplayMetrics;

import java.lang.IllegalArgumentException;
import java.lang.Runnable;
import java.io.InputStream;

/**
 * @author Alain BÃ©arez <A@cua.li>
 */
public class BitmapDrawable extends Drawable {
    public-read var androidBitmapDrawable = bind androidDelegate as android.graphics.drawable.BitmapDrawable;

    public default var mandatory :Constructor on replace {
        if (isInitialized(mandatory)) {
            if (null == mandatory.resources)
                throw new IllegalArgumentException("Missing mandatory Resources to build a BitmapDrawable.");
            if (null == mandatory.filepath) { // not that nice, would it be a pattern!!!
                if (null == mandatory.bitmap) {
                    if (null == mandatory.stream) {
                        androidDelegate = new android.graphics.drawable.BitmapDrawable(mandatory.resources)
                    } else {
                        androidDelegate = new android.graphics.drawable.BitmapDrawable(mandatory.resources, mandatory.stream)
                    }
                } else {
                    androidDelegate = new android.graphics.drawable.BitmapDrawable(mandatory.resources, mandatory.bitmap)
                }
            } else {
                androidDelegate = new android.graphics.drawable.BitmapDrawable(mandatory.resources, mandatory.filepath)
            }
        }
    }
    public var alpha :Integer on replace {
        if (isInitialized(alpha)) updateProperty(function() {
            androidBitmapDrawable.setAlpha(alpha)
        })
    }
    public var antiAlias :Boolean on replace {
        if (isInitialized(antiAlias)) updateProperty(function() {
            androidBitmapDrawable.setAntiAlias(antiAlias)
        })
    }
    public var colorFilter :ColorFilter on replace {
        if (isInitialized(colorFilter)) updateProperty(function() {
            androidBitmapDrawable.setColorFilter(colorFilter)
        })
    }
    public var gravity :Integer on replace {
        if (isInitialized(gravity)) updateProperty(function() {
            androidBitmapDrawable.setGravity(gravity)
        })
    }
    public var targetDensity :Integer on replace {
        if (isInitialized(targetDensity)) updateProperty(function() {
            androidBitmapDrawable.setTargetDensity(targetDensity)
        })
    }
    public var displayMetrics :DisplayMetrics on replace {
        if (isInitialized(displayMetrics)) updateProperty(function() {
            androidBitmapDrawable.setTargetDensity(displayMetrics)
        })
    }
    public var canvas :Canvas on replace {
        if (isInitialized(canvas)) updateProperty(function() {
            androidBitmapDrawable.setTargetDensity(canvas)
        })
    }
    public var tileModeX :TileMode  on replace {
        if (isInitialized(tileModeX)) updateProperty(function() {
            androidBitmapDrawable.setTileModeX(tileModeX)
        })
    }
    public var tileModeY :TileMode on replace {
        if (isInitialized(tileModeY)) updateProperty(function() {
            androidBitmapDrawable.setTileModeY(tileModeY)
        })
    }
}

public class Constructor {
    public default var resources :Resources;
    public var filepath :String;
    public var stream :InputStream;
    public var bitmap :Bitmap;
}
