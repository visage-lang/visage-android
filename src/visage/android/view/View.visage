/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.android.view;

import org.visage.android.AndroidDelegate;
import org.visage.android.ContextAware;
import org.visage.android.util.ColorAdapter;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;

/**
 * @author Stephen Chin <steveonjava@gmail.com>
 * @author Alain BÃ©arez <A@cua.li>
 */
public abstract class View extends AndroidDelegate, ContextAware {
    public-read var androidView = bind androidDelegate as android.view.View;

    public var background:Color on replace {
        if (isInitialized(background)) updateProperty(function() {
            androidView.setBackgroundColor(ColorAdapter.toAndroid(background));
        })
    }

    public var focusable:Boolean on replace {
        if (isInitialized(focusable)) updateProperty(function() {
            androidView.setFocusable(focusable);
        })
    }

    public var focusableInTouchMode:Boolean on replace {
        if (isInitialized(focusableInTouchMode)) updateProperty(function() {
            androidView.setFocusableInTouchMode(focusableInTouchMode);
        })
    }

    public var layoutParams :LayoutParams on replace {
        if (isInitialized(layoutParams)) updateProperty(function() {
            androidView.setLayoutParams(layoutParams);
        })
    }

    public var padding :Integer[] on replace {
        if (1 < sizeof padding) {
            if (isInitialized(padding)) updateProperty(function() {
                if (3 < sizeof padding) {
                    androidView.setPadding(padding[0], padding[1], padding[2], padding[3])
                } else if (2 < sizeof padding) {
                    androidView.setPadding(padding[0], padding[1], padding[2], padding[1]) 
                } else if (1 < sizeof padding) {
                    androidView.setPadding(padding[0], padding[1], padding[0], padding[1]) 
                } else {
                    androidView.setPadding(padding[0], padding[0], padding[0], padding[0]) 
                }
            })
        }
    }

    public var onClick:function() on replace {
        if (isInitialized(onClick)) updateProperty(function() {
            if (onClick != null) {
                def clickFunc = onClick;
                androidView.setOnClickListener(OnClickListener {
                    override function onClick(v) {
                        clickFunc();
                    }
                });
            } else {
                androidView.setOnClickListener(null);
            }
        })
    }
}
