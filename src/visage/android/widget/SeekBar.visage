/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.android.widget;

import android.view.animation.Interpolator;
import android.widget.SeekBar.OnSeekBarChangeListener;

import visage.android.graphics.drawable.Drawable;
import visage.android.view.View;

/**
 * @author Alain BÃ©arez <A@cua.li>
 */
public class SeekBar extends ProgressBar {
    public-read var androidSeekBar = bind androidDelegate as android.widget.SeekBar;

    override function contextUpdated() {
        androidDelegate = new android.widget.SeekBar(context);
    }
    public var keyProgressIncrement :Integer on replace {
        if (isInitialized(keyProgressIncrement)) updateProperty(function() {
            androidSeekBar.setKeyProgressIncrement(keyProgressIncrement)
        })
    }
    public var thumb :Drawable on replace {
        if (isInitialized(thumb)) updateProperty(function() {
            androidSeekBar.setThumb(thumb.androidDrawable)
        })
    }
    public var thumbOffset :Integer on replace {
        if (isInitialized(thumbOffset)) updateProperty(function() {
            androidSeekBar.setThumbOffset(thumbOffset)
        })
    }
    public var onStartTrackingTouch :function(:android.widget.SeekBar):Void on replace {
        if (isInitialized(onStartTrackingTouch)) updateProperty(changeListener)
    }
    public var onStopTrackingTouch :function(:android.widget.SeekBar):Void on replace {
        if (isInitialized(onStopTrackingTouch)) updateProperty(changeListener)
    }
    public var onProgressChanged :function(:android.widget.SeekBar,:Integer,:Boolean):Void on replace {
        if (isInitialized(onProgressChanged)) updateProperty(changeListener)
    }
    function doNoTouch(bar :android.widget.SeekBar) :Void {}
    function doNoProgress(bar :android.widget.SeekBar, progress :Integer, fromUser :Boolean) :Void {}
    function changeListener() :Void {
        if ((null == onStartTrackingTouch) and (null == onStopTrackingTouch) and (null == onProgressChanged)) {
            androidSeekBar.setOnSeekBarChangeListener(null)
        } else {
            /* The following lines give a cryptic error message:
            //    incompatible types
            //    found   : org.visage.functions.Function1<java.lang.Void,capture#62 of ? extends java.lang.Object>
            //    required: org.visage.functions.Function1<java.lang.Void,? super android.widget.SeekBar>
            // var startTouchFunction = if (null == onStartTrackingTouch) then doNoTouch else onStartTrackingTouch;
            // var stopTouchFunction = if (null == onStopTrackingTouch) then doNoTouch else onStopTrackingTouch;
            // var progressFunction = if (null == onProgressChanged) then doNoProgress else onProgressChanged;
            /**/
            // the type is required here to avoid yet another compiler error
            var startTouchFunction :function(:android.widget.SeekBar):Void; 
            if (null == onStartTrackingTouch) {
                startTouchFunction = doNoTouch
            } else {
                startTouchFunction = onStartTrackingTouch
            }
            var stopTouchFunction :function(:android.widget.SeekBar):Void;
            if (null == onStopTrackingTouch) {
                stopTouchFunction = doNoTouch
            } else {
                stopTouchFunction = onStopTrackingTouch
            }
            var progressFunction :function(:android.widget.SeekBar,:Integer,:Boolean):Void;
            if (null == onProgressChanged) {
                progressFunction = doNoProgress
            } else {
                progressFunction = onProgressChanged
            }
            androidSeekBar.setOnSeekBarChangeListener(
                OnSeekBarChangeListener {
                    override function onStartTrackingTouch(bar) {
                        startTouchFunction(bar)
                    }
                    override function onStopTrackingTouch(bar) {
                        stopTouchFunction(bar)
                    }
                    override function onProgressChanged(bar, progress, fromUser) {
                        progressFunction(bar, progress, fromUser)
                    }
                }
            )
        }
    }
}
