/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.android.widget;

import android.view.animation.Interpolator;

import visage.android.graphics.drawable.Drawable;
import visage.android.view.View;

/**
 * @author Alain BÃ©arez <A@cua.li>
 */
public class ProgressBar extends View {
    public-read var androidProgressBar = bind androidDelegate as android.widget.ProgressBar;

    override function contextUpdated() {
        androidDelegate = new android.widget.ProgressBar(context);
    }
    public var indeterminate :Boolean on replace {
        if (isInitialized(indeterminate)) updateProperty(function() {
            androidProgressBar.setIndeterminate(indeterminate)
        })
    }
    public var indeterminateDrawable :Drawable on replace {
        if (isInitialized(indeterminateDrawable)) updateProperty(function() {
            androidProgressBar.setIndeterminateDrawable(indeterminateDrawable.androidDrawable)
        })
    }
    public var interpolator :Interpolator on replace {
        if (isInitialized(interpolator)) updateProperty(function() {
            androidProgressBar.setInterpolator(interpolator)
        })
    }
    public var max :Integer on replace {
        if (isInitialized(max)) updateProperty(function() {
            androidProgressBar.setMax(max)
        })
    }
    public var progress :Integer on replace {
        if (isInitialized(progress)) updateProperty(function() {
            androidProgressBar.setProgress(progress)
        })
    }
    public var progressDrawable :Drawable on replace {
        if (isInitialized(progressDrawable)) updateProperty(function() {
            androidProgressBar.setProgressDrawable(progressDrawable.androidDrawable)
        })
    }
    public var secondaryProgress :Integer on replace {
        if (isInitialized(secondaryProgress)) updateProperty(function() {
            androidProgressBar.setSecondaryProgress(secondaryProgress)
        })
    }
    public var visibility :Integer on replace {
        if (isInitialized(visibility)) updateProperty(function() {
            androidProgressBar.setVisibility(visibility)
        })
    }
}
